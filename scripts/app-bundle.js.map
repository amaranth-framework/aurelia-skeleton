{"version":3,"sources":["src/app.js","src/environment.js","src/main.js","src/features/abstract-view.js","src/features/utils.js","src/resources/index.js","app.less"],"names":["App","message","debug","testing","configure","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","then","setRoot","AbstractView","AureliaConfiguration","I18N","api","config","events","i18n","router","defaultSettings","overrideSettingsKey","getEndpoint","uuid","activate","args","length","model","shift","p","params","routeConfig","navigationInstruction","settings","mergeSettings","subscribeOnce","initialized","init","get","bind","bindingContext","overrideContext","parent","parentOverrideContext","modelDefaultSettings","overrideSettings","toString","_logger","getLogger","_overrideSettings","style","layout","extend","className","parentClassName","deep","target","NULL","forEach","key","object","includes","Array","isArray","obj","isConstructor","_className","name","constructor","match","parentClass","Object","getPrototypeOf","Error"],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class App {\n  constructor() {\n    this.message = 'Hello World!';\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","// import { AureliaConfiguration } from 'aurelia-configuration';\nimport { Config as API } from 'aurelia-api';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { inject, LogManager } from 'aurelia-framework';\n// import { I18N } from 'aurelia-i18n';\nimport { Router } from 'aurelia-router';\n\nimport { uuid } from 'uuid';\n\nimport { extend, className, parentClassName } from 'features/utils';\n\n/**\n * Abstract Class for all Model Views (Components) used within the project\n *\n * @link https://www.danyow.net/inversion-of-control-with-aurelia-part-1/\n * @export\n * @class AbstractView\n */\n@inject(API, AureliaConfiguration, EventAggregator, I18N, Router)\nexport class AbstractView {\n    /*************************************************************************************\n     * Inherited\n     *************************************************************************************/\n    /**\n     * Creates an instance of AbstractView.\n     * @param {Config} api aurelia-api module\n     * @param {AureliaConfiguration} config aurelia-configuraton module\n     * @param {EventAggregator} events Aurelia EventsAggregator module\n     * @param {I18N} i18n aurelia-i18n module\n     * @param {Router} router Aurelia Router module\n     */\n    constructor(api, config, events, i18n, router) {\n        this.api = api.getEndpoint('api');\n        if (i18n) { this.i18n = i18n; }\n        this.config = config;\n        this.events = events;\n        this.router = router;\n\n        this.uuid = uuid;\n    }\n    /**\n     * Implement this hook if you want to perform custom logic just before your view-model is displayed. You can\n     * optionally return a promise to tell the router to wait to bind and attach the view until after you finish your\n     * work.\n     * Forms to call:\n     * @method activate(model: Object) for components\n     * @method activate(params: Object, routeConfig: Object, navigationInstruction: NavigationInstruction) for page templates\n     */\n    activate(...args) {\n        // parse module variable\n        if (args.length === 1) {\n            let model = args.shift();\n\n            for (let p in model) {\n                this[p] = model[p];\n            }\n        }\n        // parse template params\n        if (args.length > 1) {\n            // Save params\n            this.params = args.shift();\n            // Save routeConfig\n            this.routeConfig = args.shift();\n            // Save navigationInstruction\n            this.navigationInstruction = args.shift();\n            // obtain settings from routeConfig variable\n            this.settings = this.routeConfig ? this.routeConfig.settings : {};\n        }\n\n        this.mergeSettings();\n\n        this.events.subscribeOnce('session:ready', result => !this.initialized ? this.init() : false);\n\n        if (this.config.get('session.ready') && !this.initialized) {\n            this.init();\n        }\n    }\n    /**\n     * Invoked when the view that contains the extension is attached to the DOM.\n     * @method attached\n     */\n    /**\n     * Invoked when the databinding engine binds the view. The binding context is the instance that the view is\n     * databound to.\n     * @method bind\n     * @param   {Object}  bindingContext\n     * @param   {Object}  overrideContext?\n     * @param   {Boolean} _systemUpdate? default true\n     * @returns {void}\n     */\n    bind(bindingContext, overrideContext) {\n        // obtain view parent\n        this.parent = overrideContext.parentOverrideContext.bindingContext;\n    }\n    /**\n     * Implement this hook if you want to control whether or not your view-model can be navigated to. Return a boolean\n     * value, a promise for a boolean value, or a navigation command.\n     * @method canActivate\n     * @param {Object} params\n     * @param {Object} routeConfig\n     * @param {Object} navigationInstruction\n     */\n    /**\n     * Implement this hook if you want to control whether or not the router can navigate away from your view-model when\n     * moving to a new route. Return a boolean value, a promise for a boolean value, or a navigation command.\n     * @method canDeactivate\n     */\n    /**\n     * Implement this hook if your view-model needs to translating url changes into application state.\n     * @method configureRouter\n     * @param {Object} config\n     * @param {Router} router\n     */\n    /**\n     * Invoked once the component is created...\n     * @method created\n     * @param {View} view\n     */\n    /**\n     * Invoked when the view that contains the extension is detached from the DOM.\n     * @method detached\n     */\n    /**\n     * Invoked when the databinding engine unbinds the view.\n     * @method unbind\n     */\n    /*************************************************************************************\n     * Amaranth\n     *************************************************************************************/\n    /**\n     * Default View Settings. Can be null\n     * @type {Object|null}\n     */\n    defaultSettings = null;\n    /**\n     * Override Settings Key.\n     * If using 'aurelia-configuration', this key will be used to extract over writing settings from application config.\n     * @type {String}\n     */\n    overrideSettingsKey = false;\n    /**\n     * Specific init function for each model view. AbstravView will call it at the end of the activate method.\n     * Generaly this method may be async.\n     * @method init\n     */\n    init() { }\n    /**\n     * Merge settings\n     * @method mergeSettings\n     */\n    mergeSettings() {\n        // in case a `defaultSettings` object exists, merge the `settings` object passed by @model\n        // ofer the default settings.\n        if (this.defaultSettings) {\n            // this.logger.debug('ModelView::mergeSettings => overrideSettingsKey: ', this.overrideSettingsKey);\n            // this.logger.debug('ModelView::mergeSettings => defaultSettings: ', extend({}, this.modelDefaultSettings || {}), this.defaultSettings);\n            let defaultSettings = extend(true, this.modelDefaultSettings || {}, this.defaultSettings || {});\n            delete this.modelDefaultSettings;\n            // this.logger.debug('ModelView::mergeSettings => settings split:', defaultSettings, this.overrideSettings, extend({}, this.settings || {}));\n            this.settings = extend(true, {}, defaultSettings, this.overrideSettings, this.settings || {});\n            // this.logger.debug('ModelView::mergeSettings => settings:', this.settings);\n        }\n    }\n    /**\n     *\n     * @return {String}\n     */\n    toString() {\n        return `view@${this.uuid}`;\n    }\n    /**\n     * Logger Getter\n     * @method logger\n     * @return {Logger}\n     */\n    get logger() {\n        if (!this._logger) {\n            this._logger = LogManager.getLogger(`${parentClassName(this)}/${className(this)}`);\n        }\n        return this._logger;\n    }\n    /**\n     * Getter for component override settings. This settings should globaly override settings defined in a component's\n     * `defaultSettings` variable. If the override settubgs do not exists, it will return an empty object.\n     * @method overrideSettings\n     * @return {Object}\n     */\n    get overrideSettings() {\n        if (!this._overrideSettings) {\n            this._overrideSettings = this.config.get(this.overrideSettingsKey) || {};\n        }\n        // this.logger.debug('defaultOverrideSettings: ', this._defaultOverrideSettings);\n        return this._overrideSettings;\n    }\n    /**\n     * Getter for concatenating component style/bind\n     * @method style\n     * @return {String}\n     */\n    get style() {\n        return `${this.settings.style || ''} ${this.settings.layout || ''}`;\n    }\n}\n","// import { LogManager } from 'aurelia-framework';\n\n/**\n * Extend the `target` object with all the objects behind him (in the list of params).\n * As a note, this will not 'extend' arrays. If you need that, please use $.extend from jQuery.\n * @param  {Boolean}   deep   Whether to do a deep extend or not.\n * @param  {Object}    target Object to extend\n * @param  {...Object} args   Object(s) to extend with\n * @return {Object}           Extended object\n */\nexport function extend(deep, target, ...args) {\n    const NULL = [null, 'null'];\n\n    args.forEach(object => {\n        for (let key in object) {\n            if (NULL.includes(object[key])) {\n                target[key] = null;\n                continue;\n            }\n\n            if (deep && typeof object[key] === 'object' && !Array.isArray(object[key])) {\n                target[key] = extend(deep, target[key] || {}, object[key]);\n            } else {\n                target[key] = object[key];\n            }\n        }\n    });\n    return target;\n}\n\n/**\n * Obtain the name of a class\n * @param  {Object} obj           Object to obtain the class name\n * @param  {Boolean} isContructor Wheter object is the constructor already or not\n * @return {String}               String name of the class\n */\nexport function className(obj, isConstructor = false) {\n    let _className = isConstructor ? obj.name : obj.constructor.name;\n    if (typeof _className === 'undefined') { // Internet Explorer\n        // TODO: NOT HAPPY at all with the idea of using regexp; maybe there is another method ?\n        _className = (isConstructor ? obj : obj.constructor).toString().match(/ ([^ ]+)\\(/)[1];\n    }\n    return _className;\n}\n\n/**\n * Obtain the name of a class's parent (the name of the class which is extended by the current one)\n * @param  {Object} obj Object to obtain the parent class name\n * @return {String}     String name of the class\n */\nexport function parentClassName(obj) {\n    let parentClass = Object.getPrototypeOf(obj.constructor);\n    if (typeof parentClass === 'undefined') {\n        throw new Error('Could not determine parent class name for ' + className(obj) + '. Does it extend any class?');\n    }\n    return className(parentClass, true);\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","\n"],"sourceRoot":".."}